;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit noc : 
  module Router : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_1 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_2 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_3 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_4 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_5 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_6 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_7 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module Router_8 : 
    input clock : Clock
    input reset : Reset
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_NI : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_NI : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 42:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_NI_dout : UInt<32>
    out_NI_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 50:17]
    io.out_S.dout <= out_S_dout @[Router.scala 51:17]
    io.out_W.dout <= out_W_dout @[Router.scala 52:17]
    io.out_E.dout <= out_E_dout @[Router.scala 53:17]
    io.out_NI.dout <= out_NI_dout @[Router.scala 54:18]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 56:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 57:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 58:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 59:22]
    io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 60:23]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 62:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 63:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 64:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 65:21]
    io.in_NI.ready_out <= UInt<1>("h00") @[Router.scala 66:22]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 68:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 69:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 70:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 71:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:26]
    reg dataReg_NI : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:27]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 75:25]
    node destination_y = bits(dataReg, 1, 0) @[Router.scala 77:30]
    node destination_x = bits(dataReg, 3, 2) @[Router.scala 78:30]
    node _T = asUInt(reset) @[Router.scala 80:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Router.scala 80:9]
    when _T_1 : @[Router.scala 80:9]
      printf(clock, UInt<1>(1), "Dest_x is %d, a dest_y is %d\n", destination_x, destination_y) @[Router.scala 80:9]
      skip @[Router.scala 80:9]
    node _T_2 = asUInt(reset) @[Router.scala 81:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[Router.scala 81:9]
    when _T_3 : @[Router.scala 81:9]
      printf(clock, UInt<1>(1), "Data Registar of router (%d,%d) is: %d\n", io.x, io.y, dataReg) @[Router.scala 81:9]
      skip @[Router.scala 81:9]
    node _T_4 = asUInt(reset) @[Router.scala 82:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[Router.scala 82:9]
    when _T_5 : @[Router.scala 82:9]
      printf(clock, UInt<1>(1), "State registar of router (%d,%d) is: %d\n", io.x, io.y, stateReg) @[Router.scala 82:9]
      skip @[Router.scala 82:9]
    node _T_6 = eq(stateReg, UInt<1>("h00")) @[Router.scala 84:17]
    when _T_6 : @[Router.scala 84:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 85:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 86:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 87:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 88:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 89:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 90:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 91:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 92:19]
      io.out_NI.valid_out <= UInt<1>("h00") @[Router.scala 93:25]
      io.out_NI.dout <= UInt<1>("h00") @[Router.scala 94:20]
      when io.in_N.valid_in : @[Router.scala 96:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 97:25]
        stateReg <= UInt<1>("h01") @[Router.scala 98:16]
        dataReg_N <= io.in_N.din @[Router.scala 99:17]
        dataReg <= io.in_N.din @[Router.scala 100:15]
        skip @[Router.scala 96:29]
      else : @[Router.scala 101:35]
        when io.in_S.valid_in : @[Router.scala 101:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 102:25]
          stateReg <= UInt<1>("h01") @[Router.scala 103:16]
          dataReg_S <= io.in_S.din @[Router.scala 104:17]
          dataReg <= io.in_S.din @[Router.scala 105:15]
          skip @[Router.scala 101:35]
        else : @[Router.scala 106:34]
          when io.in_W.valid_in : @[Router.scala 106:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 107:25]
            stateReg <= UInt<1>("h01") @[Router.scala 108:16]
            dataReg_W <= io.in_W.din @[Router.scala 109:17]
            dataReg <= io.in_W.din @[Router.scala 110:15]
            skip @[Router.scala 106:34]
          else : @[Router.scala 111:34]
            when io.in_E.valid_in : @[Router.scala 111:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 112:25]
              stateReg <= UInt<1>("h01") @[Router.scala 113:16]
              dataReg_E <= io.in_E.din @[Router.scala 114:17]
              dataReg <= io.in_E.din @[Router.scala 115:15]
              skip @[Router.scala 111:34]
            else : @[Router.scala 116:35]
              when io.in_NI.valid_in : @[Router.scala 116:35]
                io.in_NI.ready_out <= UInt<1>("h01") @[Router.scala 117:26]
                stateReg <= UInt<1>("h01") @[Router.scala 118:16]
                dataReg_NI <= io.in_NI.din @[Router.scala 119:18]
                dataReg <= io.in_NI.din @[Router.scala 120:15]
                skip @[Router.scala 116:35]
      skip @[Router.scala 84:26]
    else : @[Router.scala 123:33]
      node _T_7 = eq(stateReg, UInt<1>("h01")) @[Router.scala 123:24]
      when _T_7 : @[Router.scala 123:33]
        node _T_8 = gt(destination_y, io.y) @[Router.scala 125:25]
        when _T_8 : @[Router.scala 125:33]
          node _T_9 = asUInt(reset) @[Router.scala 126:13]
          node _T_10 = eq(_T_9, UInt<1>("h00")) @[Router.scala 126:13]
          when _T_10 : @[Router.scala 126:13]
            printf(clock, UInt<1>(1), "uso x\n") @[Router.scala 126:13]
            skip @[Router.scala 126:13]
          io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 127:26]
          skip @[Router.scala 125:33]
        else : @[Router.scala 128:39]
          node _T_11 = lt(destination_y, io.y) @[Router.scala 128:31]
          when _T_11 : @[Router.scala 128:39]
            io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 129:26]
            skip @[Router.scala 128:39]
          else : @[Router.scala 130:18]
            node _T_12 = asUInt(reset) @[Router.scala 131:13]
            node _T_13 = eq(_T_12, UInt<1>("h00")) @[Router.scala 131:13]
            when _T_13 : @[Router.scala 131:13]
              printf(clock, UInt<1>(1), "uso y\n") @[Router.scala 131:13]
              skip @[Router.scala 131:13]
            node _T_14 = gt(destination_x, io.x) @[Router.scala 132:27]
            when _T_14 : @[Router.scala 132:35]
              io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 133:28]
              skip @[Router.scala 132:35]
            else : @[Router.scala 134:41]
              node _T_15 = lt(destination_x, io.x) @[Router.scala 134:33]
              when _T_15 : @[Router.scala 134:41]
                io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 135:28]
                skip @[Router.scala 134:41]
              else : @[Router.scala 136:20]
                node _T_16 = asUInt(reset) @[Router.scala 137:15]
                node _T_17 = eq(_T_16, UInt<1>("h00")) @[Router.scala 137:15]
                when _T_17 : @[Router.scala 137:15]
                  printf(clock, UInt<1>(1), "uso NI\n") @[Router.scala 137:15]
                  skip @[Router.scala 137:15]
                io.out_NI.valid_out <= UInt<1>("h01") @[Router.scala 138:29]
                skip @[Router.scala 136:20]
            skip @[Router.scala 130:18]
        when io.out_N.valid_out : @[Router.scala 142:30]
          when io.out_N.ready_in : @[Router.scala 143:31]
            out_N_dout <= dataReg @[Router.scala 144:20]
            stateReg <= UInt<1>("h00") @[Router.scala 145:18]
            dataReg <= UInt<1>("h00") @[Router.scala 146:17]
            skip @[Router.scala 143:31]
          skip @[Router.scala 142:30]
        else : @[Router.scala 148:37]
          when io.out_S.valid_out : @[Router.scala 148:37]
            when io.out_S.ready_in : @[Router.scala 149:31]
              io.out_S.dout <= dataReg @[Router.scala 150:23]
              stateReg <= UInt<1>("h00") @[Router.scala 151:18]
              dataReg <= UInt<1>("h00") @[Router.scala 152:17]
              skip @[Router.scala 149:31]
            skip @[Router.scala 148:37]
          else : @[Router.scala 154:37]
            when io.out_W.valid_out : @[Router.scala 154:37]
              when io.out_W.ready_in : @[Router.scala 155:31]
                io.out_W.dout <= dataReg @[Router.scala 156:23]
                stateReg <= UInt<1>("h00") @[Router.scala 157:18]
                dataReg <= UInt<1>("h00") @[Router.scala 158:17]
                skip @[Router.scala 155:31]
              skip @[Router.scala 154:37]
            else : @[Router.scala 160:37]
              when io.out_E.valid_out : @[Router.scala 160:37]
                when io.out_E.ready_in : @[Router.scala 161:31]
                  out_E_dout <= dataReg @[Router.scala 162:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 163:18]
                  dataReg <= UInt<1>("h00") @[Router.scala 164:17]
                  skip @[Router.scala 161:31]
                skip @[Router.scala 160:37]
              else : @[Router.scala 166:38]
                when io.out_NI.valid_out : @[Router.scala 166:38]
                  when io.out_NI.ready_in : @[Router.scala 167:32]
                    out_NI_dout <= dataReg @[Router.scala 168:21]
                    stateReg <= UInt<1>("h00") @[Router.scala 169:18]
                    dataReg <= UInt<1>("h00") @[Router.scala 170:17]
                    skip @[Router.scala 167:32]
                  skip @[Router.scala 166:38]
        skip @[Router.scala 123:33]
    node _T_18 = asUInt(reset) @[Router.scala 175:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Router.scala 175:9]
    when _T_19 : @[Router.scala 175:9]
      printf(clock, UInt<1>(1), "!!!!!!!!\n") @[Router.scala 175:9]
      skip @[Router.scala 175:9]
    
  module noc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip NI_din : UInt<32>, flip NI_valid_in : UInt<1>, flip NI_ready_in : UInt<1>, ni_1_data : UInt<32>, ni_2_data : UInt<32>, ni_3_data : UInt<32>, ni_4_data : UInt<32>, ni_5_data : UInt<32>, ni_6_data : UInt<32>, ni_7_data : UInt<32>, ni_8_data : UInt<32>, ni_9_data : UInt<32>}
    
    wire som : UInt<32>
    som <= UInt<32>("h00")
    inst router1 of Router @[noc.scala 35:23]
    router1.clock <= clock
    router1.reset <= reset
    inst router2 of Router_1 @[noc.scala 36:23]
    router2.clock <= clock
    router2.reset <= reset
    inst router3 of Router_2 @[noc.scala 37:23]
    router3.clock <= clock
    router3.reset <= reset
    inst router4 of Router_3 @[noc.scala 38:23]
    router4.clock <= clock
    router4.reset <= reset
    inst router5 of Router_4 @[noc.scala 39:23]
    router5.clock <= clock
    router5.reset <= reset
    inst router6 of Router_5 @[noc.scala 40:23]
    router6.clock <= clock
    router6.reset <= reset
    inst router7 of Router_6 @[noc.scala 41:23]
    router7.clock <= clock
    router7.reset <= reset
    inst router8 of Router_7 @[noc.scala 42:23]
    router8.clock <= clock
    router8.reset <= reset
    inst router9 of Router_8 @[noc.scala 43:23]
    router9.clock <= clock
    router9.reset <= reset
    router1.io.x <= UInt<1>("h00") @[noc.scala 47:16]
    router1.io.y <= UInt<1>("h00") @[noc.scala 48:16]
    router2.io.x <= UInt<1>("h00") @[noc.scala 50:16]
    router2.io.y <= UInt<1>("h01") @[noc.scala 51:16]
    router3.io.x <= UInt<1>("h00") @[noc.scala 53:16]
    router3.io.y <= UInt<2>("h02") @[noc.scala 54:16]
    router4.io.x <= UInt<1>("h01") @[noc.scala 56:16]
    router4.io.y <= UInt<1>("h00") @[noc.scala 57:16]
    router5.io.x <= UInt<1>("h01") @[noc.scala 59:16]
    router5.io.y <= UInt<1>("h01") @[noc.scala 60:16]
    router6.io.x <= UInt<1>("h01") @[noc.scala 62:16]
    router6.io.y <= UInt<2>("h02") @[noc.scala 63:16]
    router7.io.x <= UInt<2>("h02") @[noc.scala 65:16]
    router7.io.y <= UInt<1>("h00") @[noc.scala 66:16]
    router8.io.x <= UInt<2>("h02") @[noc.scala 68:16]
    router8.io.y <= UInt<1>("h01") @[noc.scala 69:16]
    router9.io.x <= UInt<2>("h02") @[noc.scala 71:16]
    router9.io.y <= UInt<2>("h02") @[noc.scala 72:16]
    router1.io.in_N.din <= router7.io.out_S.dout @[noc.scala 74:23]
    router1.io.in_S.din <= router4.io.out_N.dout @[noc.scala 75:23]
    router1.io.in_W.din <= router3.io.out_E.dout @[noc.scala 76:23]
    router1.io.in_E.din <= router2.io.out_W.dout @[noc.scala 77:23]
    router2.io.in_N.din <= router8.io.out_S.dout @[noc.scala 79:23]
    router2.io.in_S.din <= router5.io.out_N.dout @[noc.scala 80:23]
    router2.io.in_W.din <= router1.io.out_E.dout @[noc.scala 81:23]
    router2.io.in_E.din <= router3.io.out_W.dout @[noc.scala 82:23]
    router3.io.in_N.din <= router9.io.out_S.dout @[noc.scala 84:23]
    router3.io.in_S.din <= router6.io.out_N.dout @[noc.scala 85:23]
    router3.io.in_W.din <= router2.io.out_E.dout @[noc.scala 86:23]
    router3.io.in_E.din <= router1.io.out_W.dout @[noc.scala 87:23]
    router4.io.in_N.din <= router1.io.out_S.dout @[noc.scala 89:23]
    router4.io.in_S.din <= router7.io.out_N.dout @[noc.scala 90:23]
    router4.io.in_W.din <= router6.io.out_E.dout @[noc.scala 91:23]
    router4.io.in_E.din <= router5.io.out_W.dout @[noc.scala 92:23]
    router5.io.in_N.din <= router2.io.out_S.dout @[noc.scala 94:23]
    router5.io.in_S.din <= router8.io.out_N.dout @[noc.scala 95:23]
    router5.io.in_W.din <= router4.io.out_E.dout @[noc.scala 96:23]
    router5.io.in_E.din <= router6.io.out_W.dout @[noc.scala 97:23]
    router6.io.in_N.din <= router3.io.out_S.dout @[noc.scala 99:23]
    router6.io.in_S.din <= router9.io.out_N.dout @[noc.scala 100:23]
    router6.io.in_W.din <= router5.io.out_E.dout @[noc.scala 101:23]
    router6.io.in_E.din <= router4.io.out_W.dout @[noc.scala 102:23]
    router7.io.in_N.din <= router4.io.out_S.dout @[noc.scala 104:23]
    router7.io.in_S.din <= router1.io.out_N.dout @[noc.scala 105:23]
    router7.io.in_W.din <= router9.io.out_E.dout @[noc.scala 106:23]
    router7.io.in_E.din <= router8.io.out_W.dout @[noc.scala 107:23]
    router8.io.in_N.din <= router5.io.out_S.dout @[noc.scala 109:23]
    router8.io.in_S.din <= router2.io.out_N.dout @[noc.scala 110:23]
    router8.io.in_W.din <= router7.io.out_E.dout @[noc.scala 111:23]
    router8.io.in_E.din <= router9.io.out_W.dout @[noc.scala 112:23]
    router9.io.in_N.din <= router6.io.out_S.dout @[noc.scala 114:23]
    router9.io.in_S.din <= router3.io.out_N.dout @[noc.scala 115:23]
    router9.io.in_W.din <= router8.io.out_E.dout @[noc.scala 116:23]
    router9.io.in_E.din <= router7.io.out_W.dout @[noc.scala 117:23]
    router1.io.in_N.valid_in <= router7.io.out_S.valid_out @[noc.scala 124:28]
    router1.io.in_S.valid_in <= router4.io.out_N.valid_out @[noc.scala 125:28]
    router1.io.in_W.valid_in <= router3.io.out_E.valid_out @[noc.scala 126:28]
    router1.io.in_E.valid_in <= router2.io.out_W.valid_out @[noc.scala 127:28]
    router2.io.in_N.valid_in <= router8.io.out_S.valid_out @[noc.scala 129:28]
    router2.io.in_S.valid_in <= router5.io.out_N.valid_out @[noc.scala 130:28]
    router2.io.in_W.valid_in <= router1.io.out_E.valid_out @[noc.scala 131:28]
    router2.io.in_E.valid_in <= router3.io.out_W.valid_out @[noc.scala 132:28]
    router3.io.in_N.valid_in <= router9.io.out_S.valid_out @[noc.scala 134:28]
    router3.io.in_S.valid_in <= router6.io.out_N.valid_out @[noc.scala 135:28]
    router3.io.in_W.valid_in <= router2.io.out_E.valid_out @[noc.scala 136:28]
    router3.io.in_E.valid_in <= router1.io.out_W.valid_out @[noc.scala 137:28]
    router4.io.in_N.valid_in <= router1.io.out_S.valid_out @[noc.scala 139:28]
    router4.io.in_S.valid_in <= router7.io.out_N.valid_out @[noc.scala 140:28]
    router4.io.in_W.valid_in <= router6.io.out_E.valid_out @[noc.scala 141:28]
    router4.io.in_E.valid_in <= router5.io.out_W.valid_out @[noc.scala 142:28]
    router5.io.in_N.valid_in <= router2.io.out_S.valid_out @[noc.scala 144:28]
    router5.io.in_S.valid_in <= router8.io.out_N.valid_out @[noc.scala 145:28]
    router5.io.in_W.valid_in <= router4.io.out_E.valid_out @[noc.scala 146:28]
    router5.io.in_E.valid_in <= router6.io.out_W.valid_out @[noc.scala 147:28]
    router6.io.in_N.valid_in <= router3.io.out_S.valid_out @[noc.scala 149:28]
    router6.io.in_S.valid_in <= router9.io.out_N.valid_out @[noc.scala 150:28]
    router6.io.in_W.valid_in <= router5.io.out_E.valid_out @[noc.scala 151:28]
    router6.io.in_E.valid_in <= router4.io.out_W.valid_out @[noc.scala 152:28]
    router7.io.in_N.valid_in <= router4.io.out_S.valid_out @[noc.scala 154:28]
    router7.io.in_S.valid_in <= router1.io.out_N.valid_out @[noc.scala 155:28]
    router7.io.in_W.valid_in <= router9.io.out_E.valid_out @[noc.scala 156:28]
    router7.io.in_E.valid_in <= router8.io.out_W.valid_out @[noc.scala 157:28]
    router8.io.in_N.valid_in <= router5.io.out_S.valid_out @[noc.scala 159:28]
    router8.io.in_S.valid_in <= router2.io.out_N.valid_out @[noc.scala 160:28]
    router8.io.in_W.valid_in <= router7.io.out_E.valid_out @[noc.scala 161:28]
    router8.io.in_E.valid_in <= router9.io.out_W.valid_out @[noc.scala 162:28]
    router9.io.in_N.valid_in <= router6.io.out_S.valid_out @[noc.scala 164:28]
    router9.io.in_S.valid_in <= router3.io.out_N.valid_out @[noc.scala 165:28]
    router9.io.in_W.valid_in <= router8.io.out_E.valid_out @[noc.scala 166:28]
    router9.io.in_E.valid_in <= router7.io.out_W.valid_out @[noc.scala 167:28]
    router1.io.out_N.ready_in <= router7.io.in_S.ready_out @[noc.scala 173:29]
    router1.io.out_S.ready_in <= router4.io.in_N.ready_out @[noc.scala 174:29]
    router1.io.out_W.ready_in <= router3.io.in_E.ready_out @[noc.scala 175:29]
    router1.io.out_E.ready_in <= router2.io.in_W.ready_out @[noc.scala 176:29]
    router2.io.out_N.ready_in <= router8.io.in_S.ready_out @[noc.scala 178:29]
    router2.io.out_S.ready_in <= router5.io.in_N.ready_out @[noc.scala 179:29]
    router2.io.out_W.ready_in <= router1.io.in_E.ready_out @[noc.scala 180:29]
    router2.io.out_E.ready_in <= router3.io.in_W.ready_out @[noc.scala 181:29]
    router3.io.out_N.ready_in <= router9.io.in_S.ready_out @[noc.scala 183:29]
    router3.io.out_S.ready_in <= router6.io.in_N.ready_out @[noc.scala 184:29]
    router3.io.out_W.ready_in <= router2.io.in_E.ready_out @[noc.scala 185:29]
    router3.io.out_E.ready_in <= router1.io.in_W.ready_out @[noc.scala 186:29]
    router4.io.out_N.ready_in <= router1.io.in_S.ready_out @[noc.scala 188:29]
    router4.io.out_S.ready_in <= router7.io.in_N.ready_out @[noc.scala 189:29]
    router4.io.out_W.ready_in <= router6.io.in_E.ready_out @[noc.scala 190:29]
    router4.io.out_E.ready_in <= router5.io.in_W.ready_out @[noc.scala 191:29]
    router5.io.out_N.ready_in <= router2.io.in_S.ready_out @[noc.scala 193:29]
    router5.io.out_S.ready_in <= router8.io.in_N.ready_out @[noc.scala 194:29]
    router5.io.out_W.ready_in <= router4.io.in_E.ready_out @[noc.scala 195:29]
    router5.io.out_E.ready_in <= router6.io.in_W.ready_out @[noc.scala 196:29]
    router6.io.out_N.ready_in <= router3.io.in_S.ready_out @[noc.scala 198:29]
    router6.io.out_S.ready_in <= router9.io.in_N.ready_out @[noc.scala 199:29]
    router6.io.out_W.ready_in <= router5.io.in_E.ready_out @[noc.scala 200:29]
    router6.io.out_E.ready_in <= router4.io.in_W.ready_out @[noc.scala 201:29]
    router7.io.out_N.ready_in <= router4.io.in_S.ready_out @[noc.scala 203:29]
    router7.io.out_S.ready_in <= router1.io.in_N.ready_out @[noc.scala 204:29]
    router7.io.out_W.ready_in <= router9.io.in_E.ready_out @[noc.scala 205:29]
    router7.io.out_E.ready_in <= router8.io.in_W.ready_out @[noc.scala 206:29]
    router8.io.out_N.ready_in <= router5.io.in_S.ready_out @[noc.scala 208:29]
    router8.io.out_S.ready_in <= router2.io.in_N.ready_out @[noc.scala 209:29]
    router8.io.out_W.ready_in <= router7.io.in_E.ready_out @[noc.scala 210:29]
    router8.io.out_E.ready_in <= router9.io.in_W.ready_out @[noc.scala 211:29]
    router9.io.out_N.ready_in <= router6.io.in_S.ready_out @[noc.scala 213:29]
    router9.io.out_S.ready_in <= router3.io.in_N.ready_out @[noc.scala 214:29]
    router9.io.out_W.ready_in <= router8.io.in_E.ready_out @[noc.scala 215:29]
    router9.io.out_E.ready_in <= router7.io.in_W.ready_out @[noc.scala 216:29]
    io.ni_1_data <= router1.io.out_NI.dout @[noc.scala 220:16]
    io.ni_2_data <= router2.io.out_NI.dout @[noc.scala 221:16]
    io.ni_3_data <= router3.io.out_NI.dout @[noc.scala 222:16]
    io.ni_4_data <= router4.io.out_NI.dout @[noc.scala 223:16]
    io.ni_5_data <= router5.io.out_NI.dout @[noc.scala 224:16]
    io.ni_6_data <= router6.io.out_NI.dout @[noc.scala 225:16]
    io.ni_7_data <= router7.io.out_NI.dout @[noc.scala 226:16]
    io.ni_8_data <= router8.io.out_NI.dout @[noc.scala 227:16]
    io.ni_9_data <= router9.io.out_NI.dout @[noc.scala 228:16]
    node _T = bits(reset, 0, 0) @[noc.scala 231:9]
    node _T_1 = eq(_T, UInt<1>("h00")) @[noc.scala 231:9]
    when _T_1 : @[noc.scala 231:9]
      printf(clock, UInt<1>(1), "Router 1 NI data input is %d\n", router1.io.in_NI.din) @[noc.scala 231:9]
      skip @[noc.scala 231:9]
    node _T_2 = bits(reset, 0, 0) @[noc.scala 232:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[noc.scala 232:9]
    when _T_3 : @[noc.scala 232:9]
      printf(clock, UInt<1>(1), "Router 1 East data output is %d\n", router1.io.out_E.dout) @[noc.scala 232:9]
      skip @[noc.scala 232:9]
    node _T_4 = bits(reset, 0, 0) @[noc.scala 233:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[noc.scala 233:9]
    when _T_5 : @[noc.scala 233:9]
      printf(clock, UInt<1>(1), "Router 2 West data input is %d\n", router2.io.in_W.din) @[noc.scala 233:9]
      skip @[noc.scala 233:9]
    node _T_6 = bits(reset, 0, 0) @[noc.scala 234:9]
    node _T_7 = eq(_T_6, UInt<1>("h00")) @[noc.scala 234:9]
    when _T_7 : @[noc.scala 234:9]
      printf(clock, UInt<1>(1), "Router 2 South data output is %d\n", router2.io.out_S.dout) @[noc.scala 234:9]
      skip @[noc.scala 234:9]
    node _T_8 = bits(reset, 0, 0) @[noc.scala 235:9]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[noc.scala 235:9]
    when _T_9 : @[noc.scala 235:9]
      printf(clock, UInt<1>(1), "Router 2 South valid_out output is %d\n", router2.io.out_S.valid_out) @[noc.scala 235:9]
      skip @[noc.scala 235:9]
    node _T_10 = bits(reset, 0, 0) @[noc.scala 236:9]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[noc.scala 236:9]
    when _T_11 : @[noc.scala 236:9]
      printf(clock, UInt<1>(1), "Router 2 South ready_in input is %d\n", router2.io.out_S.ready_in) @[noc.scala 236:9]
      skip @[noc.scala 236:9]
    node _T_12 = bits(reset, 0, 0) @[noc.scala 238:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[noc.scala 238:9]
    when _T_13 : @[noc.scala 238:9]
      printf(clock, UInt<1>(1), "Router 9 NI dout is %d\n", router9.io.out_NI.dout) @[noc.scala 238:9]
      skip @[noc.scala 238:9]
    node _T_14 = bits(reset, 0, 0) @[noc.scala 239:9]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[noc.scala 239:9]
    when _T_15 : @[noc.scala 239:9]
      printf(clock, UInt<1>(1), "IO 9 NI dout is %d\n", io.ni_9_data) @[noc.scala 239:9]
      skip @[noc.scala 239:9]
    node _T_16 = bits(reset, 0, 0) @[noc.scala 240:9]
    node _T_17 = eq(_T_16, UInt<1>("h00")) @[noc.scala 240:9]
    when _T_17 : @[noc.scala 240:9]
      printf(clock, UInt<1>(1), "---------------------------------------------------\n") @[noc.scala 240:9]
      skip @[noc.scala 240:9]
    router1.io.in_NI.din <= io.NI_din @[noc.scala 245:24]
    router1.io.in_NI.valid_in <= io.NI_valid_in @[noc.scala 246:29]
    router1.io.out_NI.ready_in <= som @[noc.scala 247:30]
    router2.io.in_NI.din <= som @[noc.scala 249:24]
    router2.io.in_NI.valid_in <= som @[noc.scala 250:29]
    router2.io.out_NI.ready_in <= som @[noc.scala 251:30]
    router3.io.in_NI.din <= som @[noc.scala 253:24]
    router3.io.in_NI.valid_in <= som @[noc.scala 254:29]
    router3.io.out_NI.ready_in <= som @[noc.scala 255:30]
    router4.io.in_NI.din <= som @[noc.scala 257:24]
    router4.io.in_NI.valid_in <= som @[noc.scala 258:29]
    router4.io.out_NI.ready_in <= som @[noc.scala 259:30]
    router5.io.in_NI.din <= som @[noc.scala 261:24]
    router5.io.in_NI.valid_in <= som @[noc.scala 262:29]
    router5.io.out_NI.ready_in <= som @[noc.scala 263:30]
    router6.io.in_NI.din <= som @[noc.scala 265:24]
    router6.io.in_NI.valid_in <= som @[noc.scala 266:29]
    router6.io.out_NI.ready_in <= som @[noc.scala 267:30]
    router7.io.in_NI.din <= som @[noc.scala 269:24]
    router7.io.in_NI.valid_in <= som @[noc.scala 270:29]
    router7.io.out_NI.ready_in <= som @[noc.scala 271:30]
    router8.io.in_NI.din <= som @[noc.scala 273:24]
    router8.io.in_NI.valid_in <= som @[noc.scala 274:29]
    router8.io.out_NI.ready_in <= som @[noc.scala 275:30]
    router9.io.in_NI.din <= som @[noc.scala 277:24]
    router9.io.in_NI.valid_in <= som @[noc.scala 278:29]
    router9.io.out_NI.ready_in <= io.NI_ready_in @[noc.scala 279:30]
    
