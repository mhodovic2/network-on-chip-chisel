;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit Router : 
  module Router : 
    input clock : Clock
    input reset : UInt<1>
    output io : {in_N : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_S : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_W : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_E : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, in_CPU : {flip valid_in : UInt<1>, ready_out : UInt<1>, flip din : UInt<32>}, out_N : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_S : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_W : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_E : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, out_CPU : {valid_out : UInt<1>, flip ready_in : UInt<1>, dout : UInt<32>}, flip x : UInt<2>, flip y : UInt<2>}
    
    reg som : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 46:20]
    wire out_N_dout : UInt<32>
    out_N_dout <= UInt<32>("h00")
    wire out_S_dout : UInt<32>
    out_S_dout <= UInt<32>("h00")
    wire out_W_dout : UInt<32>
    out_W_dout <= UInt<32>("h00")
    wire out_E_dout : UInt<32>
    out_E_dout <= UInt<32>("h00")
    wire out_CPU_dout : UInt<32>
    out_CPU_dout <= UInt<32>("h00")
    io.out_N.dout <= out_N_dout @[Router.scala 54:17]
    io.out_S.dout <= out_S_dout @[Router.scala 55:17]
    io.out_W.dout <= out_W_dout @[Router.scala 56:17]
    io.out_E.dout <= out_E_dout @[Router.scala 57:17]
    io.out_CPU.dout <= out_CPU_dout @[Router.scala 58:19]
    io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 60:22]
    io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 61:22]
    io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 62:22]
    io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 63:22]
    io.out_CPU.valid_out <= UInt<1>("h00") @[Router.scala 64:24]
    io.in_N.ready_out <= UInt<1>("h00") @[Router.scala 66:21]
    io.in_S.ready_out <= UInt<1>("h00") @[Router.scala 67:21]
    io.in_W.ready_out <= UInt<1>("h00") @[Router.scala 68:21]
    io.in_E.ready_out <= UInt<1>("h00") @[Router.scala 69:21]
    io.in_CPU.ready_out <= UInt<1>("h00") @[Router.scala 70:23]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 72:24]
    reg dataReg_N : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 73:26]
    reg dataReg_S : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 74:26]
    reg dataReg_W : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 75:26]
    reg dataReg_E : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 76:26]
    reg dataReg_CPU : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Router.scala 77:28]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Router.scala 80:25]
    node destination_x = bits(dataReg, 1, 0) @[Router.scala 82:30]
    node destination_y = bits(dataReg, 3, 2) @[Router.scala 83:30]
    node _T = gt(destination_x, io.x) @[Router.scala 85:23]
    when _T : @[Router.scala 85:31]
      io.out_E.valid_out <= UInt<1>("h01") @[Router.scala 86:24]
      skip @[Router.scala 85:31]
    else : @[Router.scala 87:37]
      node _T_1 = lt(destination_x, io.x) @[Router.scala 87:29]
      when _T_1 : @[Router.scala 87:37]
        io.out_W.valid_out <= UInt<1>("h01") @[Router.scala 88:24]
        skip @[Router.scala 87:37]
      else : @[Router.scala 89:16]
        node _T_2 = gt(destination_y, io.y) @[Router.scala 90:25]
        when _T_2 : @[Router.scala 90:33]
          io.out_S.valid_out <= UInt<1>("h01") @[Router.scala 91:26]
          skip @[Router.scala 90:33]
        else : @[Router.scala 92:39]
          node _T_3 = lt(destination_y, io.y) @[Router.scala 92:31]
          when _T_3 : @[Router.scala 92:39]
            io.out_N.valid_out <= UInt<1>("h01") @[Router.scala 93:26]
            skip @[Router.scala 92:39]
          else : @[Router.scala 94:18]
            io.out_CPU.valid_out <= UInt<1>("h01") @[Router.scala 95:28]
            skip @[Router.scala 94:18]
        skip @[Router.scala 89:16]
    node _T_4 = eq(stateReg, UInt<1>("h00")) @[Router.scala 100:17]
    when _T_4 : @[Router.scala 100:26]
      io.out_N.valid_out <= UInt<1>("h00") @[Router.scala 101:24]
      io.out_N.dout <= UInt<1>("h00") @[Router.scala 102:19]
      io.out_S.valid_out <= UInt<1>("h00") @[Router.scala 103:24]
      io.out_S.dout <= UInt<1>("h00") @[Router.scala 104:19]
      io.out_W.valid_out <= UInt<1>("h00") @[Router.scala 105:24]
      io.out_W.dout <= UInt<1>("h00") @[Router.scala 106:19]
      io.out_E.valid_out <= UInt<1>("h00") @[Router.scala 107:24]
      io.out_E.dout <= UInt<1>("h00") @[Router.scala 108:19]
      when io.in_N.valid_in : @[Router.scala 109:29]
        io.in_N.ready_out <= UInt<1>("h01") @[Router.scala 110:25]
        stateReg <= UInt<1>("h01") @[Router.scala 111:16]
        dataReg_N <= io.in_N.din @[Router.scala 112:17]
        dataReg <= io.in_N.din @[Router.scala 113:15]
        skip @[Router.scala 109:29]
      else : @[Router.scala 114:35]
        when io.in_S.valid_in : @[Router.scala 114:35]
          io.in_S.ready_out <= UInt<1>("h01") @[Router.scala 115:25]
          stateReg <= UInt<1>("h01") @[Router.scala 116:16]
          dataReg_S <= io.in_S.din @[Router.scala 117:17]
          dataReg <= io.in_S.din @[Router.scala 118:15]
          skip @[Router.scala 114:35]
        else : @[Router.scala 119:34]
          when io.in_W.valid_in : @[Router.scala 119:34]
            io.in_W.ready_out <= UInt<1>("h01") @[Router.scala 120:25]
            stateReg <= UInt<1>("h01") @[Router.scala 121:16]
            dataReg_W <= io.in_W.din @[Router.scala 122:17]
            dataReg <= io.in_W.din @[Router.scala 123:15]
            skip @[Router.scala 119:34]
          else : @[Router.scala 124:34]
            when io.in_E.valid_in : @[Router.scala 124:34]
              io.in_E.ready_out <= UInt<1>("h01") @[Router.scala 125:25]
              stateReg <= UInt<1>("h01") @[Router.scala 126:16]
              dataReg_E <= io.in_E.din @[Router.scala 127:17]
              dataReg <= io.in_E.din @[Router.scala 128:15]
              skip @[Router.scala 124:34]
      skip @[Router.scala 100:26]
    else : @[Router.scala 130:33]
      node _T_5 = eq(stateReg, UInt<1>("h01")) @[Router.scala 130:24]
      when _T_5 : @[Router.scala 130:33]
        when io.out_N.valid_out : @[Router.scala 131:30]
          when io.out_N.ready_in : @[Router.scala 132:31]
            out_N_dout <= dataReg @[Router.scala 133:20]
            stateReg <= UInt<1>("h00") @[Router.scala 134:18]
            skip @[Router.scala 132:31]
          skip @[Router.scala 131:30]
        else : @[Router.scala 136:37]
          when io.out_S.valid_out : @[Router.scala 136:37]
            when io.out_S.ready_in : @[Router.scala 137:31]
              io.out_S.dout <= dataReg @[Router.scala 138:23]
              stateReg <= UInt<1>("h00") @[Router.scala 139:18]
              skip @[Router.scala 137:31]
            skip @[Router.scala 136:37]
          else : @[Router.scala 141:37]
            when io.out_W.valid_out : @[Router.scala 141:37]
              when io.out_W.ready_in : @[Router.scala 142:31]
                io.out_W.dout <= dataReg @[Router.scala 143:23]
                stateReg <= UInt<1>("h00") @[Router.scala 144:18]
                skip @[Router.scala 142:31]
              skip @[Router.scala 141:37]
            else : @[Router.scala 146:37]
              when io.out_E.valid_out : @[Router.scala 146:37]
                when io.out_E.ready_in : @[Router.scala 147:31]
                  out_E_dout <= dataReg @[Router.scala 148:20]
                  stateReg <= UInt<1>("h00") @[Router.scala 149:18]
                  skip @[Router.scala 147:31]
                skip @[Router.scala 146:37]
        skip @[Router.scala 130:33]
    
